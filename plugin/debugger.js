// Generated by CoffeeScript 1.9.1
var CurrentLinesView, DebuggerView, LayerInspector, LinesView, OverlayLinesView, Profiler, SoundInspector, debuggerView, hideDebuggerView, insertCss, layerToPageAndLayerNumber, scrollElementToOffset, setupViews, showDebuggerView,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

$('body').on('keyup', function(e) {
  if (e.which !== 73) {
    return;
  }
  if (typeof debuggerView !== "undefined" && debuggerView !== null ? debuggerView.element.parents().length : void 0) {
    return o2.hideDebugger();
  } else {
    return o2.openDebugger();
  }
});

if (o2.openDebugger == null) {
  o2.openDebugger = function() {
    setupViews();
    showDebuggerView();
    return debuggerView.refresh();
  };
}

if (o2.hideDebugger == null) {
  o2.hideDebugger = function() {
    if (typeof debuggerView === "undefined" || debuggerView === null) {
      return;
    }
    return hideDebuggerView();
  };
}

debuggerView = void 0;

setupViews = function() {
  var eventName, j, k, len, len1, originalRun, originalWait, ref, ref1, results1, scrollHandler, stopEvent;
  if (debuggerView != null) {
    return;
  }
  debuggerView = new DebuggerView;
  $(conductor).on('ran', function(e, mode) {
    if (mode !== 0) {
      debuggerView.linesView.scrollToCurrentTag();
    }
    return debuggerView.refreshButtons();
  });
  debuggerView.refreshButtons();
  originalRun = conductor.run;
  conductor.run = function() {
    debuggerView.checkBreakPoint();
    return originalRun.apply(this, arguments);
  };
  originalWait = conductor.wait;
  conductor.wait = function() {
    originalWait.apply(this, arguments);
    return debuggerView.linesView.scrollToCurrentTag();
  };
  insertCss();
  scrollHandler = function(e) {
    var _parents, canScroll, element, j, len, parents, ref, results1, scrollLeft, scrollTop;
    _parents = $(e.target).parents();
    if (ref = debuggerView.element[0], indexOf.call(_parents, ref) >= 0) {
      e.stopImmediatePropagation();
      e.preventDefault();
    }
    parents = [e.target];
    _parents.each(function(i, e) {
      return parents.push(e);
    });
    canScroll = function(e) {
      return (e.scrollHeight > e.offsetHeight || e.scrollWidth > e.offsetWidth) && $(e).css('overflow') === 'scroll';
    };
    results1 = [];
    for (j = 0, len = parents.length; j < len; j++) {
      element = parents[j];
      if (!canScroll(element)) {
        continue;
      }
      scrollTop = element.scrollTop - e.originalEvent.wheelDeltaY * 0.4;
      scrollLeft = element.scrollLeft - e.originalEvent.wheelDeltaX * 0.4;
      scrollElementToOffset(element, scrollLeft, scrollTop);
      $(element).trigger('scroll');
      break;
    }
    return results1;
  };
  ref = ['mousewheel', 'DOMMouseScroll', 'wheel'];
  for (j = 0, len = ref.length; j < len; j++) {
    eventName = ref[j];
    $('body').bindFirst(eventName, scrollHandler);
  }
  $(window).on('resize', function() {
    return debuggerView.refresh();
  });
  stopEvent = function(e) {
    var ref1, ref2, ref3;
    if ((ref1 = debuggerView.element[0], indexOf.call($(e.target).parents(), ref1) >= 0) || (ref2 = (ref3 = debuggerView.selector) != null ? ref3[0] : void 0, indexOf.call($(e.target).parents(), ref2) >= 0)) {
      return e.stopImmediatePropagation();
    }
  };
  ref1 = ['mouseup', 'mousemove', 'mousedown'];
  results1 = [];
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    eventName = ref1[k];
    results1.push($('body').bindFirst(eventName, stopEvent));
  }
  return results1;
};

showDebuggerView = function() {
  debuggerView.element.appendTo($('body'));
  scaleToFitPage($(window).width() - debuggerView.element.width(), $(window).height());
  return $('#main-wrapper').css('left', 0);
};

hideDebuggerView = function() {
  return debuggerView.element.animate({
    'right': -1 * debuggerView.element.width()
  }, 200, function() {
    debuggerView.element.detach();
    debuggerView.element.css('right', '0');
    return scaleToFitPage(-1, -1);
  });
};

DebuggerView = (function() {
  function DebuggerView() {
    this.element = $('<div>').addClass('debugger-view');
    $('<div>').addClass('continueButton right-button').html('▶︎').attr('enabled', 'false').appendTo(this.element).click((function(_this) {
      return function() {
        return _this.continueBreakPoint();
      };
    })(this));
    $('<div>').addClass('layersButton right-button').html('layers').appendTo(this.element).click((function(_this) {
      return function() {
        return _this.showLayerSelector(function(layer) {
          var inspector;
          inspector = new LayerInspector(layer);
          return inspector.show(_this.element);
        });
      };
    })(this));
    $('<div>').addClass('soundsButton right-button').html('sounds').appendTo(this.element).click((function(_this) {
      return function() {
        return _this.showSoundSelector(function(sound) {
          var inspector;
          inspector = new SoundInspector(sound);
          return inspector.show(_this.element);
        });
      };
    })(this));
    $('<div>').addClass('callStackButton right-button').html('call').appendTo(this.element).click((function(_this) {
      return function() {
        return _this.showCallStack(function(callTag) {
          var overlay;
          console.log(arguments);
          overlay = new OverlayLinesView(callTag.file);
          overlay.show(_this.element);
          return overlay.highlightLine(callTag.originalLineNumber);
        });
      };
    })(this));
    $('<div>').addClass('macroStackButton right-button').html('macro').appendTo(this.element).click((function(_this) {
      return function() {
        return _this.showMacroStack(function(macroTag) {
          var overlay;
          overlay = new OverlayLinesView(macroTag.file);
          overlay.show(_this.element);
          return overlay.highlightLine(macroTag.originalLineNumber);
        });
      };
    })(this));
    $('<div>').addClass('profileButton right-button').html('Profile').appendTo(this.element).click((function(_this) {
      return function() {
        if (!_this.profiler) {
          _this.profiler = new Profiler;
          _this.profiler.start();
          return $('.profileButton').addClass('activated');
        } else {
          _this.profiler.stop();
          $('.profileButton').removeClass('activated');
          if (_this.profiler.records.length) {
            return _this.profiler.show(_this.element, function() {
              return _this.profiler = null;
            });
          } else {
            return _this.profiler = null;
          }
        }
      };
    })(this));
    this.visible = true;
    this.linesView = new CurrentLinesView;
    this.linesView.element.appendTo(this.element);
    this.breakPoints = {};
    this.breakPointStatus = {
      paused: false,
      tag: void 0
    };
  }

  DebuggerView.prototype.refresh = function() {
    return $('.lines-view').each(function() {
      var ref;
      return (ref = $(this).data('controller')) != null ? ref.refresh() : void 0;
    });
  };

  DebuggerView.prototype.addBreakPoint = function(filename, line) {
    var base;
    if ((base = this.breakPoints)[filename] == null) {
      base[filename] = [];
    }
    if (!this.breakPointExist(filename, line)) {
      this.breakPoints[filename].push(line);
    }
    return this.refresh();
  };

  DebuggerView.prototype.removeBreakPoint = function(filename, line) {
    var index;
    if (!this.breakPointExist(filename, line)) {
      return;
    }
    index = this.breakPoints[filename].indexOf(line);
    delete this.breakPoints[filename][index];
    return this.refresh();
  };

  DebuggerView.prototype.breakPointExist = function(filenameOrTag, line) {
    if (filenameOrTag instanceof Tag) {
      if (!filenameOrTag.file) {
        return false;
      }
      return this.breakPointExist(filenameOrTag.file.filename, filenameOrTag.originalLineNumber);
    } else {
      return indexOf.call(this.breakPointsInFile(filenameOrTag), line) >= 0;
    }
  };

  DebuggerView.prototype.breakPointsInFile = function(filename) {
    return this.breakPoints[filename] || [];
  };

  DebuggerView.prototype.checkBreakPoint = function() {
    var nextTag, waitTag;
    this.refreshButtons();
    nextTag = conductor.getNextTag();
    if ((this.breakPointExist(nextTag)) && (conductor.currentTag.tagName !== "wait_breakpoint")) {
      waitTag = new Tag('wait_breakpoint');
      waitTag.file = nextTag.file;
      waitTag.originalLineNumber = nextTag.originalLineNumber;
      [].push.call(conductor.queue, waitTag);
      this.breakPointStatus = {
        paused: true,
        tag: nextTag
      };
      return $('.continueButton').attr('enabled', 'true');
    }
  };

  DebuggerView.prototype.isPausedAtTag = function(tag) {
    return this.breakPointStatus.paused && this.breakPointStatus.tag === tag;
  };

  Tag.actions.wait_breakpoint = new TagAction({
    action: function() {
      return 1;
    }
  });

  DebuggerView.prototype.continueBreakPoint = function() {
    if (!this.breakPointStatus.paused) {
      return;
    }
    $('.continueButton').attr('enabled', 'false');
    this.breakPointStatus = {
      paused: false,
      tag: void 0
    };
    return conductor.trigger('wait_breakpoint');
  };

  DebuggerView.prototype.refreshButtons = function() {
    $('.macroStackButton').attr('enabled', conductor.macroStack.length > 0);
    return $('.callStackButton').attr('enabled', conductor.callStack.length > 0);
  };

  DebuggerView.prototype.blurBackground = function() {
    return this.element.css({
      '-webkit-filter': 'blur(3px) brightness(0.3)',
      'pointer-events': 'none'
    });
  };

  DebuggerView.prototype.unblurBackground = function() {
    return this.element.css({
      '-webkit-filter': '',
      'pointer-events': 'auto'
    });
  };

  DebuggerView.prototype.showLayerSelector = function(callback) {
    var addLayer, j, k, layer, len, len1, ref, ref1;
    this.blurBackground();
    this.selector = $('<div>').addClass('selector');
    addLayer = (function(_this) {
      return function(layer) {
        var name;
        name = layerToPageAndLayerNumber(layer);
        if (!name) {
          return;
        }
        return $('<div>').html(name.page + " / " + name.layer).addClass('choice').click(function() {
          _this.unblurBackground();
          callback(layer);
          _this.selector.remove();
          return delete _this.selector;
        }).appendTo(_this.selector);
      };
    })(this);
    ref = o2.allForeLayers();
    for (j = 0, len = ref.length; j < len; j++) {
      layer = ref[j];
      addLayer(layer);
    }
    ref1 = o2.allBackLayers();
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      layer = ref1[k];
      addLayer(layer);
    }
    return this.selector.appendTo($('body'));
  };

  DebuggerView.prototype.showSoundSelector = function(callback) {
    var addSound, i, j, len, ref, se;
    this.blurBackground();
    this.selector = $('<div>').addClass('selector');
    addSound = (function(_this) {
      return function(sound, name) {
        if (typeof name === "number") {
          name = "se" + name;
        }
        return $('<div>').html(name).addClass('choice').click(function() {
          _this.unblurBackground();
          callback(sound);
          _this.selector.remove();
          return delete _this.selector;
        }).appendTo(_this.selector);
      };
    })(this);
    addSound(o2.bgm, 'bgm');
    ref = o2.se;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      se = ref[i];
      addSound(se, i);
    }
    return this.selector.appendTo($('body'));
  };

  DebuggerView.prototype.showCallStack = function(callback) {
    var addTag, j, len, ref, tag;
    this.blurBackground();
    this.selector = $('<div>').addClass('selector');
    addTag = (function(_this) {
      return function(tagRestoreable) {
        var lineNumber, text;
        lineNumber = tagRestoreable.originalLineNumber || tagRestoreable.line;
        text = tagRestoreable.file + ':' + (lineNumber - 1) + ' : call';
        return $('<div>').addClass('choice').html(text).click(function() {
          _this.unblurBackground();
          _this.selector.remove();
          delete _this.selector;
          return $.when(tagRestoreable.restore()).then(function(returnTag) {
            return callback(returnTag);
          });
        }).appendTo(_this.selector);
      };
    })(this);
    ref = conductor.callStack;
    for (j = 0, len = ref.length; j < len; j++) {
      tag = ref[j];
      addTag(tag);
    }
    return this.selector.appendTo($('body'));
  };

  DebuggerView.prototype.showMacroStack = function(callback) {
    var addMacro, j, len, macro, ref;
    this.blurBackground();
    this.selector = $('<div>').addClass('selector');
    addMacro = (function(_this) {
      return function(macro) {
        var lineNumber, text;
        lineNumber = macro.returnTag.originalLineNumber || macro.returnTag.line;
        text = macro.returnTag.file.filename + ' : ' + (lineNumber - 1) + ' : ' + macro.definition.name;
        return $('<div>').addClass('choice').html(text).click(function() {
          _this.unblurBackground();
          _this.selector.remove();
          delete _this.selector;
          return $.when(macro.returnTag.restore()).then(function(returnTag) {
            var macroTag;
            macroTag = returnTag.file.lines[returnTag.lineNumber - 1];
            return callback(macroTag);
          });
        }).appendTo(_this.selector);
      };
    })(this);
    ref = conductor.macroStack;
    for (j = 0, len = ref.length; j < len; j++) {
      macro = ref[j];
      addMacro(macro);
    }
    return this.selector.appendTo($('body'));
  };

  return DebuggerView;

})();

LinesView = (function() {
  var linesEnumerator, textFromTag;

  function LinesView() {
    this.lineHeight = 14;
    this.element = $('<div>').addClass('lines-view');
    this.element.data('controller', this);
    this.content = $('<div>').addClass('content').on('scroll', (function(_this) {
      return function() {
        return _this.refresh();
      };
    })(this)).appendTo(this.element);
    this.title = $('<div>').addClass('title-bar').appendTo(this.element);
    this.heightPlaceHolder = $('<div>').css({
      top: 0,
      height: 0,
      width: 1,
      left: 0
    }).appendTo(this.content);
    this.currentFilename = void 0;
  }

  LinesView.prototype.setFile = function(file) {
    if (file.filename !== this.currentFilename) {
      this.currentFilename = file.filename;
      this.file = file;
      this.title.html(this.currentFilename);
      this.refreshHeight();
      return this.refresh();
    }
  };

  LinesView.prototype.refreshHeight = function() {
    var maxLine, totalHeight;
    maxLine = this.file.lines[this.file.lines.length - 1].originalLineNumber;
    totalHeight = (maxLine + 1) * this.lineHeight;
    return this.heightPlaceHolder.height(totalHeight);
  };

  LinesView.prototype.refresh = function() {
    var addBreakPointMark, addTag, loopLines, makeLine, maxIndex, minIndex;
    this.refreshHeight();
    minIndex = Math.floor(this.content.scrollTop() / this.lineHeight) + 1;
    maxIndex = Math.ceil((this.content.scrollTop() + this.content[0].offsetHeight) / this.lineHeight);
    this.content.html("");
    this.content.append(this.heightPlaceHolder);
    makeLine = (function(_this) {
      return function(index) {
        return $('<div>').attr('line', index).css({
          top: (index - 1) * _this.lineHeight
        }).addClass('line').append($('<span>').addClass('line-number').html(index).click(function(e) {
          e.stopImmediatePropagation();
          if (debuggerView.breakPointExist(_this.currentFilename, index)) {
            return debuggerView.removeBreakPoint(_this.currentFilename, index);
          } else {
            return debuggerView.addBreakPoint(_this.currentFilename, index);
          }
        }));
      };
    })(this);
    addTag = (function(_this) {
      return function(tag, line) {
        var textElement;
        textElement = $('<span>').html(textFromTag(tag)).attr({
          'line': tag.lineNumber
        }).addClass('tag');
        if (!debuggerView.breakPointStatus.paused) {
          if (tag === conductor.currentTag) {
            textElement.css({
              'color': 'red'
            });
          }
        } else {
          if (debuggerView.isPausedAtTag(tag)) {
            textElement.css({
              'text-shadow': 'green 0px 0px 5px'
            });
          }
        }
        textElement.appendTo(line);
        if (conductor.isMacro(tag)) {
          return textElement.css({
            'cursor': 'pointer',
            'text-decoration': 'underline'
          }).click(function() {
            var definition;
            definition = conductor.macros[tag.tagName];
            return $.when(definition.startTag.restore()).done(function(startTag) {
              var overlay;
              overlay = new OverlayLinesView(startTag.file);
              overlay.show(debuggerView.element);
              return overlay.highlightLine(startTag.originalLineNumber);
            });
          });
        }
      };
    })(this);
    addBreakPointMark = function(line) {
      return $('<div>').addClass('breakPoint').appendTo(line);
    };
    loopLines = linesEnumerator(this.file, minIndex, maxIndex);
    return loopLines((function(_this) {
      return function(tags, i) {
        var j, len, line, thisTag;
        line = makeLine(i);
        for (j = 0, len = tags.length; j < len; j++) {
          thisTag = tags[j];
          addTag(thisTag, line);
        }
        if (debuggerView.breakPointExist(_this.currentFilename, i)) {
          addBreakPointMark(line);
        }
        return _this.content.append(line);
      };
    })(this));
  };

  linesEnumerator = function(file, min, max) {
    var tagsInThisLine;
    if (min == null) {
      min = 0;
    }
    if (max == null) {
      max = Infinity;
    }
    tagsInThisLine = [];
    return function(callback) {
      var i, j, len, nextTag, ref, results1, tag;
      ref = file.lines;
      results1 = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        tag = ref[i];
        if (tag.originalLineNumber < min) {
          continue;
        }
        if (tag.originalLineNumber > max) {
          break;
        }
        tagsInThisLine.push(tag);
        nextTag = file.lines[i + 1];
        if (!nextTag || nextTag.originalLineNumber !== tag.originalLineNumber) {
          callback(tagsInThisLine, tag.originalLineNumber);
          results1.push(tagsInThisLine = []);
        } else {
          results1.push(void 0);
        }
      }
      return results1;
    };
  };

  textFromTag = function(tag) {
    var key, value;
    switch (tag.tagName) {
      case "text":
        return tag.args.text;
      case "label":
        if (tag.args.caption != null) {
          return "*" + tag.args.name + " | " + tag.args.caption;
        } else {
          return "*" + tag.args.name;
        }
        break;
      default:
        return "[" + tag.tagName + " " + (((function() {
          var ref, results1;
          ref = tag.args;
          results1 = [];
          for (key in ref) {
            value = ref[key];
            results1.push(key + '="' + value + '"');
          }
          return results1;
        })()).join(' ')) + "]";
    }
  };

  LinesView.prototype.scrollToOffset = function(offsetX, offsetY) {
    return scrollElementToOffset(this.content[0], offsetX, offsetY);
  };

  LinesView.prototype.scrollToTag = function(tag) {
    var offsetX, offsetY;
    offsetY = (tag.originalLineNumber - 1) * this.lineHeight;
    offsetY -= (this.content[0].offsetHeight - this.lineHeight) / 2;
    offsetX = (function(_this) {
      return function() {
        var lineNumberSpan, parentLeft, tagBound, tagLeft, tagSpanElement;
        tagSpanElement = _this.content.find("span[line=" + tag.lineNumber + "]")[0];
        if (!tagSpanElement) {
          return 0;
        }
        lineNumberSpan = $(tagSpanElement).siblings(':first')[0];
        if (!lineNumberSpan) {
          return 0;
        }
        parentLeft = lineNumberSpan.getBoundingClientRect().left;
        tagBound = tagSpanElement.getBoundingClientRect();
        tagLeft = tagBound.left;
        if (tagLeft - parentLeft < _this.content[0].offsetWidth) {
          return 0;
        }
        return (tagLeft - parentLeft) - (_this.content[0].offsetWidth - tagBound.width) / 2;
      };
    })(this)();
    this.scrollToOffset(offsetX, offsetY);
    if (this.currentFilename !== tag.file.filename) {
      return this.setFile(tag.file);
    } else {
      return this.refresh();
    }
  };

  return LinesView;

})();

CurrentLinesView = (function(superClass) {
  extend(CurrentLinesView, superClass);

  function CurrentLinesView() {
    CurrentLinesView.__super__.constructor.apply(this, arguments);
  }

  CurrentLinesView.prototype.refresh = function() {
    var currentTag;
    currentTag = currentConductor.currentTag;
    if (!currentTag.file && currentTag.tagName !== "wait_breakpoint") {
      return;
    }
    if (!this.file || currentTag.file.filename !== this.currentFilename) {
      return this.setFile(currentTag.file);
    } else {
      return CurrentLinesView.__super__.refresh.apply(this, arguments);
    }
  };

  CurrentLinesView.prototype.scrollToCurrentTag = function() {
    var currentTag;
    currentTag = currentConductor.currentTag;
    if (!currentTag.file) {
      return;
    }
    return this.scrollToTag(currentTag);
  };

  return CurrentLinesView;

})(LinesView);

OverlayLinesView = (function(superClass) {
  extend(OverlayLinesView, superClass);

  function OverlayLinesView(file) {
    OverlayLinesView.__super__.constructor.apply(this, arguments);
    this.element.addClass('overlay-lines-view');
    this.backgroundWrapper = $('<div>').addClass('overlay-background').click((function(_this) {
      return function(e) {
        if ($(e.target).is(_this.backgroundWrapper)) {
          return _this.close();
        }
      };
    })(this));
    this.setFile(file);
    this.highlightingLineNumber = -1;
  }

  OverlayLinesView.prototype.show = function(parent, callback1) {
    this.callback = callback1;
    $('<div>').html('Close').addClass('close-button').click((function(_this) {
      return function() {
        return _this.close();
      };
    })(this)).appendTo(this.element);
    this.element.appendTo(this.backgroundWrapper);
    this.backgroundWrapper.appendTo(parent);
    return this.refresh();
  };

  OverlayLinesView.prototype.close = function() {
    return this.backgroundWrapper.animate({
      opacity: 0,
      width: 0,
      height: 0,
      left: '50%',
      top: '50%'
    }, 200, (function(_this) {
      return function() {
        _this.backgroundWrapper.remove();
        _this.element.empty();
        _this.element.remove();
        return typeof _this.callback === "function" ? _this.callback() : void 0;
      };
    })(this));
  };

  OverlayLinesView.prototype.refresh = function() {
    OverlayLinesView.__super__.refresh.apply(this, arguments);
    if (this.highlightingLineNumber !== -1) {
      return this.content.find("div[line=" + this.highlightingLineNumber + "]").addClass('highlight');
    }
  };

  OverlayLinesView.prototype.highlightLine = function(line) {
    var offset;
    offset = (line - 1) * this.lineHeight;
    offset -= (this.content[0].offsetHeight - this.lineHeight) / 2;
    this.highlightingLineNumber = line;
    this.scrollToOffset(0, offset);
    return this.refresh();
  };

  return OverlayLinesView;

})(LinesView);

LayerInspector = (function() {
  function LayerInspector(layer1) {
    this.layer = layer1;
    this.element = $('<div>').addClass('layer-inspector');
  }

  LayerInspector.prototype.show = function(parentView) {
    var addField, controls, heightForCanvas, scale, widthForCanvas;
    parentView.append(this.element);
    this.element.append(this.layer.canvas);
    $(this.layer.canvas).addClass('inspected-layer');
    $('<div>').html('close').addClass('close').click((function(_this) {
      return function() {
        return _this.close();
      };
    })(this)).appendTo(this.element);
    controls = $('<div>').appendTo(this.element);
    addField = (function(_this) {
      return function(name, value, callback, attrs) {
        var div, inputField, nameField;
        if (attrs == null) {
          attrs = {
            type: 'text'
          };
        }
        nameField = $('<span>').html(name);
        inputField = $('<input>').attr(attrs).val(value).on('keyup change input', function() {
          callback(inputField.val());
          return renderer.animator.requestFrame();
        });
        return div = $('<div>').css({
          'float': 'left',
          'width': '30%'
        }).append(nameField).append(inputField).appendTo(controls);
      };
    })(this);
    addField('x', this.layer.rect.x, (function(_this) {
      return function(x) {
        return _this.layer.rect.x = Number(x);
      };
    })(this));
    addField('y', this.layer.rect.y, (function(_this) {
      return function(y) {
        return _this.layer.rect.y = Number(y);
      };
    })(this));
    addField('height', this.layer.rect.height, (function(_this) {
      return function(h) {
        return _this.layer.rect.height = Number(h);
      };
    })(this));
    addField('width', this.layer.rect.width, (function(_this) {
      return function(w) {
        return _this.layer.rect.width = Number(w);
      };
    })(this));
    addField('opacity', this.layer.opacity, ((function(_this) {
      return function(o) {
        return _this.layer.opacity = Number(o);
      };
    })(this)), {
      type: 'range',
      min: 0,
      max: 1,
      step: 0.01
    });
    addField('rotation', this.layer.rotation, ((function(_this) {
      return function(r) {
        return _this.layer.rotation = parseFloat(r);
      };
    })(this)), {
      type: 'range',
      min: 0,
      step: 0.01,
      max: Math.PI * 2
    });
    addField('scaleX', this.layer.scaleX, ((function(_this) {
      return function(r) {
        return _this.layer.scaleX = parseFloat(r);
      };
    })(this)), {
      type: 'range',
      min: 0.05,
      max: 5,
      step: 0.01
    });
    addField('scaleY', this.layer.scaleY, ((function(_this) {
      return function(r) {
        return _this.layer.scaleY = parseFloat(r);
      };
    })(this)), {
      type: 'range',
      min: 0.05,
      max: 5,
      step: 0.01
    });
    addField('originX', this.layer.transformOrigin.x, ((function(_this) {
      return function(r) {
        return _this.layer.transformOrigin.x = parseFloat(r);
      };
    })(this)));
    addField('originY', this.layer.transformOrigin.y, ((function(_this) {
      return function(r) {
        return _this.layer.transformOrigin.t = parseFloat(r);
      };
    })(this)));
    controls.append($('<div>').css('clear', 'both'));
    heightForCanvas = this.element.height() - controls.height();
    widthForCanvas = this.element.width();
    scale = Math.min(widthForCanvas / this.layer.canvas.width, heightForCanvas / this.layer.canvas.height);
    $(this.layer.canvas).css({
      'transform': 'scale(' + scale + ')',
      'transform-origin': '0 0'
    });
    return controls.css({
      position: 'absolute',
      top: $(this.layer.canvas).height() * scale
    });
  };

  LayerInspector.prototype.close = function() {
    return this.element.animate({
      'margin-left': this.element.width()
    }, 200, (function(_this) {
      return function() {
        $(_this.layer.canvas).css('transform', '');
        _this.element.empty();
        return _this.element.remove();
      };
    })(this));
  };

  return LayerInspector;

})();

SoundInspector = (function() {
  function SoundInspector(sound1) {
    this.sound = sound1;
    this.element = $('<div>').addClass('sound-inspector');
    this.content = $('<div>').appendTo(this.element);
    this.backgroundWrapper = $('<div>').addClass('overlay-background').click((function(_this) {
      return function(e) {
        if ($(e.target).is(_this.backgroundWrapper)) {
          return _this.close();
        }
      };
    })(this)).append(this.element);
    this.timer = void 0;
  }

  SoundInspector.prototype.infoString = function() {
    return "<table>\n<tr><td>file</td><td> " + this.sound.filepath + "</td></tr>\n<tr><td>actual path</td><td> " + this.sound.audio.src + "</td></tr>\n<tr><td>looping</td><td> " + (this.sound.loop ? "YES" : "NO") + "</td></tr>\n<tr><td>volume</td><td> " + this.sound.volume + "</td></tr>\n<tr><td>actual volume</td><td> " + (this.sound.volume * this.sound.volumePercentage) + "</td></tr>\n\n<tr><td>fading</td><td> " + (this.fadeString()) + "</td></tr>\n\n<tr><td>se gVolume</td><td> " + sf.__system.seGVolume + "</td></tr>\n<tr><td>bgm gVolume</td><td> " + sf.__system.bgmGVolume + "</td></tr>\n</table>";
  };

  SoundInspector.prototype.fadeString = function() {
    if (!this.sound.fadeStatus) {
      return "NO";
    }
    return "\nfrom volume : " + this.sound.fadeStatus.fromVolume + "\nto volume : " + this.sound.fadeStatus.toVolume + "\nduration : " + this.sound.fadeStatus.duration;
  };

  SoundInspector.prototype.show = function(parentView) {
    parentView.append(this.backgroundWrapper);
    this.timer = setInterval((function(_this) {
      return function() {
        return _this.content.html(_this.infoString());
      };
    })(this));
    return $('<table>').append($('<tr>').append($('<td>').html('Set volume:')).append($('<td>').append($('<input>').attr({
      type: 'range',
      min: 0,
      max: 1,
      step: 0.01,
      value: this.sound.volume
    }).on('change', (function(_this) {
      return function(e) {
        return _this.sound.setVolume($(e.target).val());
      };
    })(this))))).appendTo(this.element);
  };

  SoundInspector.prototype.close = function() {
    clearInterval(this.timer);
    return this.element.animate({
      opacity: 0,
      width: 0,
      height: 0,
      left: '50%',
      top: '50%'
    }, 200, (function(_this) {
      return function() {
        _this.element.empty();
        _this.element.remove();
        return _this.backgroundWrapper.remove();
      };
    })(this));
  };

  return SoundInspector;

})();

Profiler = (function() {
  var _run;

  function Profiler() {
    this.element = $('<div>').addClass('profile-view');
    this.backgroundWrapper = $('<div>').addClass('overlay-background').click((function(_this) {
      return function(e) {
        if ($(e.target).is(_this.backgroundWrapper)) {
          return _this.close();
        }
      };
    })(this));
    this.records = [];
    this.currentRecord = null;
    this.showPercentage = true;
    this.showCombined = true;
  }

  Profiler.prototype.show = function(parent, callback1) {
    var _this;
    this.callback = callback1;
    _this = this;
    $('<span>').append($('<input>').attr({
      type: 'checkbox',
      checked: true
    }).on('change', function() {
      _this.showPercentage = $(this).is(':checked');
      return _this.render();
    })).append($('<span>').html('Percentage')).appendTo(this.element);
    $('<span>').append($('<input>').attr({
      type: 'checkbox',
      checked: true
    }).on('change', function() {
      _this.showCombined = $(this).is(':checked');
      return _this.render();
    })).append($('<span>').html('Combined')).appendTo(this.element);
    this.render();
    $('<div>').html('Close').addClass('close').click((function(_this) {
      return function() {
        return _this.close();
      };
    })(this)).appendTo(this.element);
    this.element.appendTo(this.backgroundWrapper);
    return this.backgroundWrapper.appendTo(parent);
  };

  Profiler.prototype.close = function() {
    return this.backgroundWrapper.animate({
      left: '100%'
    }, 200, (function(_this) {
      return function() {
        _this.backgroundWrapper.remove();
        _this.element.empty();
        _this.element.remove();
        return typeof _this.callback === "function" ? _this.callback() : void 0;
      };
    })(this));
  };

  Profiler.prototype.render = function() {
    var allRecords, durationColumn, j, len, record, results1, row, table, tagNameColumn;
    this.element.find('table').remove();
    table = $('<table>');
    this.element.append(table);
    allRecords = this.getCalculatedRecords();
    results1 = [];
    for (j = 0, len = allRecords.length; j < len; j++) {
      record = allRecords[j];
      row = $('<tr>');
      tagNameColumn = $('<td>').html(record.tagName);
      if (record.filename && record.line) {
        tagNameColumn.append($('<span>').css('float', 'left').html('(' + record.filename + ':' + record.line + ')'));
      }
      row.append(tagNameColumn);
      durationColumn = $('<td>').css('position', 'relative').append($('<span>').addClass('duration').html(this.showPercentage ? record.duration * 100 + '%' : record.duration + 'ms'));
      if (this.showPercentage) {
        durationColumn.prepend($('<div>').css({
          position: 'absolute',
          width: record.duration * 100 + '%',
          height: '20px',
          float: 'left',
          background: '#3e73b6',
          color: 'white',
          'white-space': 'nowrap',
          overflow: 'hidden'
        }).html(record.duration * 100 + '%'));
      }
      row.append(durationColumn);
      results1.push(table.append(row));
    }
    return results1;
  };

  Profiler.prototype.getCalculatedRecords = function() {
    var durations, j, len, name1, record, ref, results, sum;
    results = clone(this.records);
    if (this.showCombined) {
      durations = {};
      ref = this.records;
      for (j = 0, len = ref.length; j < len; j++) {
        record = ref[j];
        if (durations[name1 = record.tagName] == null) {
          durations[name1] = 0;
        }
        durations[record.tagName] += record.duration;
      }
      results = Object.keys(durations).map(function(key) {
        return {
          tagName: key,
          duration: durations[key]
        };
      }).sort(function(a, b) {
        return b.duration - a.duration;
      });
    }
    sum = results.map(function(r) {
      return r.duration;
    }).reduce(function(a, b) {
      return a + b;
    });
    if (this.showPercentage) {
      results.forEach(function(r) {
        return r.duration = r.duration / sum;
      });
    } else {
      results.unshift({
        tagName: 'Total',
        duration: sum
      });
    }
    return results;
  };

  _run = null;

  Profiler.prototype.start = function() {
    var _this;
    this.records = [];
    _this = this;
    _run = Tag.prototype.run;
    return Tag.prototype.run = function() {
      var _oneShot, _thisTag, result;
      if (this.conductor !== conductor) {
        return _run.apply(this, arguments);
      }
      _this.tagStart(this);
      _thisTag = this;
      result = _run.apply(this, arguments);
      _oneShot = Conductor.prototype.oneShot;
      Conductor.prototype.oneShot = function() {
        if (this === conductor) {
          Conductor.prototype.oneShot = _oneShot;
          _this.tagEnd(_thisTag);
        }
        return _oneShot.apply(this, arguments);
      };
      return result;
    };
  };

  Profiler.prototype.stop = function() {
    return Tag.prototype.run = _run;
  };

  Profiler.prototype.tagStart = function(tag) {
    var ref;
    if (this.currentRecord) {
      return;
    }
    return this.currentRecord = {
      tagName: tag.tagName,
      line: tag.originalLineNumber || tag.lineNumber || tag.line,
      filename: (ref = tag.file) != null ? ref.filename : void 0,
      start: Date.now(),
      duration: 0
    };
  };

  Profiler.prototype.tagEnd = function(tag) {
    if (!this.currentRecord) {
      return;
    }
    if (this.currentRecord.tagName !== tag.tagName) {
      debugger;
      return;
    }
    this.currentRecord.duration = Date.now() - this.currentRecord.start;
    this.records.push(this.currentRecord);
    return this.currentRecord = null;
  };

  return Profiler;

})();

insertCss = function() {
  return $('<style>').html("@-webkit-keyframes fromright{\n  from {-webkit-transform: translateX(500px);}\n  to   {-webkit-transform: none;}\n}\n.debugger-view{\n  width      : 500px;\n  height     : 100%;\n  position   : absolute;\n  top        : 0;\n  right      : 0;\n  background : white;\n  -webkit-animation: fromright 0.3s;\n  box-shadow: 0 0 50px black;\n  font-family: Helvetica, Arial;\n  background : #eee;\n  -webkit-transition : -webkit-filter 0.3s linear;\n}\n\n.lines-view{\n  width    : 450px;\n  height   : 100%;\n  position : absolute;\n  left     : 0;\n  top      : 0;\n  background : white;\n}\n.lines-view .title-bar{\n  position : 'absolute';\n  left     : 0;\n  top      : 0;\n  width    : 100%;\n  height   : 30px;\n  background: #f7f7f7;\n  background: -moz-linear-gradient(top, #f7f7f7 0%, #c9c9c9 5%, #727272 100%);\n  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#f7f7f7), color-stop(5%,#c9c9c9), color-stop(100%,#727272));\n  text-align: center;\n  font-size: 17px;\n  box-shadow: 0 1px 5px -2px black;\n  line-height: 30px;\n  color: white;\n  text-shadow: 0px 1px 0px black;\n}\n.lines-view .content{\n  position : absolute;\n  left     : 0;\n  top      : 30px;\n  bottom   : 0;\n  width    : 100%;\n  overflow : scroll;\n  font-family: menlo,serif;\n  font-size: 11px;\n}\n.lines-view .line{\n  position : absolute;\n  left     : 0;\n  margin   : 0;\n  padding  : 0;\n  overflow : hidden;\n  white-space : nowrap;\n}\n.lines-view .line-number{\n    background  : #d8d8d8;\n    font-size   : 12px;\n    min-width   : 25px;\n    text-align  : right;\n    display     : inline-block;\n    cursor      : pointer;\n    box-shadow: inset 0 -1px white;\n}\n@-webkit-keyframes highlight {\n  0%   { background-color : #DAB0B0; }\n  50%  { background-color : #DF5555; }\n  100% { background-color : #DAB0B0; }\n}\n.line.highlight .line-number{\n  background-color : #F89191;\n  -webkit-animation : highlight 1s infinite;\n}\n\n.lines-view .tag{\n  line-height : " + debuggerView.linesView.lineHeight + "px;\n  white-space : nowrap;\n}\n.overlay-background{\n  position : absolute;\n  left : 0;\n  top : 0;\n  width : 100%;\n  height : 100%;\n  background : rgba(0,0,0,0.3);\n}\n.lines-view.overlay-lines-view {\n  font-family: Helvetica, Arial;\n  top : 25px;\n  bottom : 25px;\n  right : 25px;\n  left : auto;\n  height : auto;\n  -webkit-animation: popup 0.3s;\n  border-radius: 5px;\n  overflow: hidden;\n  box-shadow: 0 0 40px 0px #000;\n}\n.overlay-lines-view .close-button{\n  position: absolute;\n  right: 0px;\n  top: 0px;\n  width: 50px;\n  height: 30px;\n  border: solid rgb(213, 213, 213);\n  border-width: 0 0 0 1px;\n  color: black;\n  text-shadow: 0 1px 1px white;\n  line-height: 30px;\n  text-align: center;\n  font-size: 12px;\n  cursor : pointer;\n}\n\n.breakPoint{\n  width : 5px;\n  height : " + (debuggerView.linesView.lineHeight - 1) + "px;\n  background : #007bff;\n  overflow : visible;\n  position : absolute;\n  left : 0;\n  top : 0;\n  pointer-events : none;\n}\n.breakPoint:after{\n  content:\"\";\n  display : block;\n  width: 0px;\n  height: 0px;\n  border-style: solid;\n  border-width: " + ((debuggerView.linesView.lineHeight - 1) / 2) + "px 0 " + ((debuggerView.linesView.lineHeight - 1) / 2) + "px 7px;\n  border-color: transparent transparent transparent #007bff;\n  margin-left : 5px;\n}\n\n.right-button{\n  width: 50px;\n  height: 50px;\n  position: absolute;\n  text-align: center;\n  line-height: 50px;\n  font-size: 11px;\n  color: #222;\n  border: solid;\n  border-width: 0 0 1px 0;\n  border-color: #aaa;\n  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#efefef), color-stop(3%,#e2e2e2), color-stop(98%,#afafaf), color-stop(100%,#9e9e9e));\n  text-shadow: 0 1px 1px #fff;\n  cursor: pointer;\n}\n.right-button[enabled=false]{\n  opacity : 0.2;\n  cursor: default;\n  pointer-events : none;\n}\n.continueButton{\n  right : 0;\n  top : 0;\n  font-size: 14px;\n}\n.callStackButton{\n  right : 0;\n  top : 50px;\n}\n.macroStackButton{\n  right : 0;\n  top : 100px;\n}\n.profileButton{\n  right : 0;\n  top : 150px;\n}\n.profileButton.activated{\n  color : red;\n}\n\n.layersButton{\n  right : 0;\n  bottom : 0;\n}\n\n.soundsButton{\n  right : 0;\n  bottom : 50px;\n}\n\n@-webkit-keyframes popup{\n  0%   {-webkit-transform: scale(0); opacity:0;}\n  80%  {-webkit-transform: scale(1.05); opacity:1;}\n  100% {-webkit-transform: scale(1);}\n}\n.selector{\n  position   : absolute;\n  width      : 400px;\n  right      : 50px;\n  bottom     : 50px;\n  top        : 50px;\n  boxShadow  : 0px 0px 15px #000;\n  background : white;\n  -webkit-animation: popup 0.2s;\n  border-radius : 5px;\n}\n.selector .choice{\n  cursor : pointer;\n  border-radius : 5px;\n}\n.selector .choice:hover{\n  background : #eee;\n}\n\n.sound-inspector{\n  width      : 400px;\n  height     : 500px;\n  position   : absolute;\n  left       : 50px;\n  top        : 50px;\n  background : white;\n  -webkit-animation: popup 0.2s;\n  border-radius : 5px;\n  box-shadow  : 0px 0px 30px #000;\n}\ntable {\n  width : 100%;\n}\ntable td:first-child{\n  text-align : right;\n  width : 50%;\n}\ntable td{\n  max-width : 0;\n  word-break: break-all;\n}\ntable tr:nth-child(even){\n  background : rgb(238, 238, 238);\n}\n\n.layer-inspector{\n  width      : 100%;\n  height     : 100%;\n  position   : absolute;\n  left       : 0;\n  top        : 0;\n  background : white;\n  -webkit-animation: fromright 0.3s;\n  box-shadow  : 0px 0px 30px #000;\n}\n.layer-inspector .close{\n  width      : 50px;\n  height     : 30px;\n  position   : absolute;\n  right      : 0;\n  top        : 0;\n  background : -moz-linear-gradient(top, #f7f7f7 0%, #c9c9c9 5%, #727272 100%);\n  background : -webkit-gradient(linear, left top, left bottom, color-stop(0%,#f7f7f7), color-stop(5%,#c9c9c9), color-stop(100%,#727272));\n  border-radius : 0 0 0 5px;\n  color: black;\n  text-shadow: 0 1px 1px white;\n  box-shadow: 0 0 5px black;\n  line-height: 30px;\n  text-align: center;\n  font-size: 12px;\n  cursor : pointer;\n}\n\n.profile-view{\n  width      : 100%;\n  height     : 100%;\n  position   : absolute;\n  left       : 0;\n  top        : 0;\n  background : white;\n  -webkit-animation: fromright 0.3s;\n  box-shadow  : 0px 0px 30px #000;\n  overflow : scroll;\n}\n.profile-view .close{\n  width      : 50px;\n  height     : 30px;\n  position   : absolute;\n  right      : 0;\n  top        : 0;\n  background : -moz-linear-gradient(top, #f7f7f7 0%, #c9c9c9 5%, #727272 100%);\n  background : -webkit-gradient(linear, left top, left bottom, color-stop(0%,#f7f7f7), color-stop(5%,#c9c9c9), color-stop(100%,#727272));\n  border-radius : 0 0 0 5px;\n  color: black;\n  text-shadow: 0 1px 1px white;\n  box-shadow: 0 0 5px black;\n  line-height: 30px;\n  text-align: center;\n  font-size: 12px;\n  cursor : pointer;\n}").appendTo($('head'));
};

layerToPageAndLayerNumber = function(layer) {
  var i, j, k, l, len, len1, len2, len3, m, ref, ref1, ref2, ref3, thisLayer;
  if (o2.foreLayers.baseLayer === layer) {
    return {
      page: 'fore',
      layer: 'base'
    };
  }
  ref = o2.foreLayers.imageLayers;
  for (i = j = 0, len = ref.length; j < len; i = ++j) {
    thisLayer = ref[i];
    if (layer === thisLayer) {
      return {
        page: 'fore',
        layer: 'image' + i
      };
    }
  }
  if (o2.backLayers.baseLayer === layer) {
    return {
      page: 'back',
      layer: 'base'
    };
  }
  ref1 = o2.backLayers.imageLayers;
  for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
    thisLayer = ref1[i];
    if (layer === thisLayer) {
      return {
        page: 'back',
        layer: 'image' + i
      };
    }
  }
  ref2 = o2.foreLayers.messageLayers;
  for (i = l = 0, len2 = ref2.length; l < len2; i = ++l) {
    thisLayer = ref2[i];
    if (layer === thisLayer) {
      return {
        page: 'fore',
        layer: 'message' + i
      };
    }
  }
  ref3 = o2.backLayers.messageLayers;
  for (i = m = 0, len3 = ref3.length; m < len3; i = ++m) {
    thisLayer = ref3[i];
    if (layer === thisLayer) {
      return {
        page: 'back',
        layer: 'message' + i
      };
    }
  }
  return void 0;
};

scrollElementToOffset = function(element, offsetX, offsetY) {
  offsetY = Math.max(0, Math.min(offsetY, element.scrollHeight - element.clientHeight));
  offsetX = Math.max(0, Math.min(offsetX, element.scrollWidth - element.clientWidth));
  element.scrollTop = offsetY;
  return element.scrollLeft = offsetX;
};
